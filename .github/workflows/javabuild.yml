name: Java CI with Maven
permissions:
  id-token: write
  contents: read
on:
  push:
    branches: [ "main", "fix/**" ]
    tags: ["v*.*.*"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    # environment: development 
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2  

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar    

    # - name: Maven Build
    #   run: mvn -B package --file pom.xml -DskipTests=true

    # - name: JUnit Testing
    #   run: mvn test

    # -B verify would run the full maven lifecycle -- Build, Test, Package, Verify with SonarCloud. 
    # if successful, we should be able to see a target directory after the pipeline runs
    # Automatic Analysis has been turned off in the SonarCloud project. Running Auto and CI analysis would cause pipeline to fail

    - name: Analyze with SonarCloud
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=elboj_gitaction-repo
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN  }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Display test result
      run: | 
        ls -alr ./target/
    
    - name: Upload Jacoco result
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-result
        path: ./target/
    

  # sonar-cloud:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     # - uses: actions/checkout@v4
  #     #   with:
  #     #     fetch-depth: 0
  #     # - name: SonarCloud Scan
  #     #   uses: SonarSource/sonarcloud-github-action@v2.3.0
  #     #   env:
  #     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #     - name: Build with Maven cloud
  #       run:  |
  #         ls -alh
  #         mvn clean verify sonar:sonar --file pom.xml -Dsonar.host.url=https://sonarcloud.io 
  #           -Dsonar.organization=elboj \
  #           -Dsonar.projectKey=elboj_gitaction-repo
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: [sonar-cloud]
  #   env:
  #     ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #     ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       name: Checkout Repository
  #     - name: Log into registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ secrets.ACR_ENDPOINT }}
  #         username: ${{ secrets.ACR_USERNAME }}
  #         password: ${{ secrets.ACR_PASSWORD }}

  #     - name: Build & Push
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: false #change to true later on
  #         tags: ${{ secrets.ACR_ENDPOINT }}/numeric_counter:${{ github.sha }}

  #     - name: Docker Run
  #       run: |
  #           docker images
  #           docker run --name numeric-counter -d \
  #             -p 8080:8080 \
  #             ${{ secrets.ACR_ENDPOINT }}/numeric_counter:${{ github.sha }} \
  #           curl 127.0.0.1:8080

  # kubernetes-deploy:
  #   needs: [docker]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     - uses: azure/aks-set-context@v3
  #       with:
  #         resource-group: 'rg-uks-gen-dev001'
  #         cluster-name: 'aks-uks-gen'

  #     - name: azure/aks-set-context@v3
  #       run: |
  #         kubectl get deploy

    # - uses: actions/upload-artifact@v1
    #   with:
    #     name: Package
    #     path: coverage.xml
    
  